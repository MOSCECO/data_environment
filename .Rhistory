st_drop_geometry() %>% unlist(),
time  = ttime,
value = t(vvalu)[, 1]
)
return(out)
})
names(tbs_out) <- names(de_slice)
return(tbs_out)
})
timevar <- vartime %>% transpose()
lapply(timevar, \(x) {
y <- do.call(rbind, x)
return(y[!duplicated(y), ])
})
} else {
tibble(
x     = O[i, "decimalLongitude"] %>% st_drop_geometry() %>% unlist(),
y     = O[i, "decimalLatitude"]  %>% st_drop_geometry() %>% unlist(),
time  = NA,
value = NA
) }
return(tv)
})
# Vérification
vnan <- which(
data_per_occ_per_var %>%
lapply(pluck, "VHM0") %>%
lapply(\(tb) unique(tb$value)) %>%
is.na()
)
table(vnan) # integer(0) ok
# climatologies MOYENNES et ÉCARTS-TYPES
d <- lapply(
1:length(data_per_occ_per_var),
\(i) {
# i <- 1
print(paste0(i, "/", length(data_per_occ_per_var)))
o <- data_per_occ_per_var[[i]]
mean_values <- if(class(o)[1] == "list") {
mean_values <- lapply(
o,
\(tb) {
# tb <- o$VHM0_WW
tb_out <- tb %>%
group_by(x, y) %>%
summarise(value_mean = mean(value), value_stdv = sd(value))
}
)
names(mean_values) <- names(o)
mean_values
} else {
list(
VHM0_WW  = o %>% select(-time),
VHM0_SW1 = o %>% select(-time),
VHM0     = o %>% select(-time)
)
}
return(mean_values)
}
)
dt <- transpose(d)
d2 <- lapply(dt, \(x) do.call(rbind, x))
d2 <- lapply(d2, select, -value)
lapply(d2, dim)
lapply(d2, \(tb) table(duplicated(tb)))
d3 <- lapply(d2, \(x) x[!duplicated(x),] %>% na.omit())
lapply(d3, dim)
# fichier de sauvegarde
path_clim_global <- here("data", "tidy", "clim_global")
makeMyDir(path_clim_global)
path_supfam <- here(path_clim_global, superfamily)
makeMyDir(path_supfam)
path_supfam_sp <- here(path_clim_global, superfamily, species)
makeMyDir(path_supfam_sp)
# sauvegarde
lapply(
names(d2), \(n) write.csv(
d2[[n]],
here(path_supfam_sp, paste0(tolower(n), ".csv")),
row.names = F
)
)
?geom_density
?ggplot2::geom_density
source("~/Documents/mosceco/r_projects/MOSCECO_L2/data_environment/scripts/boot.R", echo=TRUE)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/data_environment/scripts/home_pointer_waves.R", echo=TRUE)
# profondeurs
gebcoast <- here(
"data", "tidy", "bathymetrie_gebco_raster", "bathymetry_gebco_raster_150m.tif"
) %>%
rast()
# Import des données environnementales
s2_bottomt <- list.files(
here("data", "raw", "env", "copernicus", "bottomT"), full.names = T
) %>%
read_stars(along = 3)
# redimensionnement profondeurs selon les dimensions spatiales de copernicus
crs(gebcoast) <- "epsg:4326"
s2_gebcoast <- st_as_stars(gebcoast)
raster_bottomt <- nc2
raster_bottomt <- raster_bottomt[, , , 1]
s2_bottomt
package_version("RNetCDF")
packageVersion("RNetCDF")
?st_apply
s2_bottomt
s2_bottomt
?st_apply
tif = system.file("tif/L7_ETMs.tif", package = "stars")
x = read_stars(tif)
x
st_apply(x, 1:2, mean) # mean band value for each pixel
st_apply(x, c("x", "y"), mean) # equivalent to the above
?st_apply
v <- c(1,2,3,4,5,5)
quantile(v, 0.1)
quantile(v, 0.9)
quantile(v, 0.01)
quantile(v, 0.09)
quantile(v, 0.99)
v <- c(1,2,3,4,5,5, NA)
quantile(v, 0.01)
# Choix du paramètre
my_var <- "bottomT"
paste("climatologies", "globales", tolower(my_var), sep = "_") %>%
paste0(".tif")
r <- rast(
here("data", "tidy", "climatologies_stars", "bottomT", "bottomt_mean_tif")
)
r <- rast(
here("data", "tidy", "climatologies_stars", "bottomT", "bottomt_mean.tif")
)
x11(); plot(r)
r
?st_apply
tif = system.file("tif/L7_ETMs.tif", package = "stars")
x = read_stars(tif)
st_apply(x, 1:2, mean) # mean band value for each pixel
st_apply(x, c("x", "y"), mean) # equivalent to the above
x
st_apply(x, 1:2, mean) # mean band value for each pixel
x
st_apply(x, 1:2, mean) # mean band value for each pixel
st_apply(x, c("x", "y"), mean)
?st_apply
?st_apply
?quantile
parallel::detectCores()
parallel::detectCores() -1
FUN <- "mean"
get(FUN)(c(1,2,3,4))
prob <- "0.01"
sprintf("%2d", prob*100)
sprintf("%2f", prob*100)
sprintf("%20", prob*100)
sprintf("%2d0", prob*100)
?sprintf
paste0(sprintf("%02df", prob*100))
prob
prob <- 0.01
sprintf("%02d", prob*100)
name_clim <- "qt" %>% paste0(sprintf("%02d", prob*100))
name_clim
name_clim <- FUN %>% paste0("qt", sprintf("%02d", prob*100))
name_clim
name_clim <- paste(
FUN, paste0("qt", sprintf("%02d", prob*100)), sep = "\\."
)
name_clim
name_clim <- paste(
FUN, paste0("qt", sprintf("%02d", prob*100)), sep = "."
)
name_clim
name_clim <- FUN %>% paste0(name_clim)
FUN <- "mean"
name_clim <- switch(
FUN, mean = "mean", sd = "stdv", min = "mini", max = "maxi"
)
name_clim <- FUN %>% paste0(name_clim)
name_clim
name_clim <- paste(
paste0("qt", sprintf("%02d", prob*100)), tolower(my_var), sep = "."
)
name_clim
name_clim <- switch(
FUN, mean = "mean", sd = "stdv", min = "mini", max = "maxi"
)
name_clim <- FUN %>% paste0(tolower(my_var))
name_clim
name_clim <- FUN %>% paste(tolower(my_var), sep = ".")
name_clim
source("~/Documents/mosceco/r_projects/MOSCECO_L2/data_environment/scripts/climatologies_globales_cluster.R", echo=TRUE)
st_bbox(c(-5, -5, 5, 5))
s2 <- s2 %>% st_crop(st_bbox(c(xmin = -5, ymin = -5, xmax = 5, ymax = 5)))
# traduction en stars
s2 <- do.call(c, s2)
s2 <- s2 %>% st_crop(st_bbox(c(xmin = -5, ymin = -5, xmax = 5, ymax = 5)))
st_bbox(c(xmin = -5, ymin = -5, xmax = 5, ymax = 5))
gebcoast
ext(gebcoast)
r <- rast(
here("data", "raw", "climatologies_globales_mean.bottomt.tif")
)
r
source("~/Documents/mosceco/r_projects/MOSCECO_L2/data_environment/scripts/climatologies_globales_cluster.R", echo=TRUE)
gebcoast
source("~/Documents/mosceco/r_projects/MOSCECO_L2/data_environment/scripts/boot.R", echo=TRUE)
# profondeurs
gebcoast <- here(
"data", "tidy", "bathymetrie_gebco_raster", "bathymetry_gebco_raster_150m.tif"
) %>%
rast()
# Import des données environnementales
s2 <- list.files(
here("data", "raw", "env", "copernicus", my_var), full.names = T
)[1:2] %>%
rast()
# Choix du paramètre
my_var <- "bottomT"
# Import des données environnementales
s2 <- list.files(
here("data", "raw", "env", "copernicus", my_var), full.names = T
)[1:2] %>%
rast()
s2
View(s2$bottomT_1)
Vx11(); plot(s2$bottomT_1)
x11(); plot(s2$bottomT_1)
?st_apply
tif = system.file("tif/L7_ETMs.tif", package = "stars")
x = read_stars(tif)
x
x11(); plot(x[, , , 1])
x
?st_warp
list.files(
here("data", "raw", "env", "copernicus", my_var), full.names = T
)[1:2]
# Import des données environnementales
s2 <- list.files(
here("data", "raw", "env", "copernicus", my_var), full.names = T
)[1:2]
s2 <- s2 %>%
# lapply(read_ncdf, proxy = FALSE)
st_as_stars()
s2
s2 <- s2 |>
# lapply(read_ncdf, proxy = FALSE)
st_as_stars()
s2 <- st_as_stars(s2)
s2 <- st_as_stars(.x = s2)
s2 <- st_as_stars(.x = s2[[1]])
s2 <- st_read(s2)
s2
s2 <- st_read(s2[[1]])
s2
s2 <- read_stars(s2)
s2
# Import des données environnementales
s2 <- list.files(
here("data", "raw", "env", "copernicus", my_var), full.names = T
)[1:2]
s2 <- read_stars(s2)
s2
?
read_ncdf
?read_ncdf
open.nc()
?st_warp
ss <- st_warp(s2[[1]], s2[[2]], crs = "EPSG:4326")
?read_stars
s2 <- here("data", "raw", "env", "copernicus", "my_var")
s2
s2
s2 <- here("data", "raw", "env", "copernicus", my_var)
s2
s2 <- here("data", "raw", "env", "copernicus", my_var) %>% paste0("/")
s2
?read_stars
read_stars
# Import des données environnementales
s2 <- list.files(
here("data", "raw", "env", "copernicus", my_var), full.names = T
)[1:2]
s2
s2 <- stars::read_stars(
s2,
sub = FALSE,
driver = ".nc",
along = 3,
curvilinear = c("longitude", "latitude"),
proxy = F
)
s2
s2 <- s2 %>%
stars::read_stars(
sub = FALSE,
driver = ".nc",
along = 3,
curvilinear = c("longitude", "latitude"),
proxy = F
)
s2
s2 <- stars::read_stars(
s2
# sub = FALSE,
# driver = ".nc",
# along = 3,
# curvilinear = c("longitude", "latitude"),
# proxy = F
)
s2
s2 <- stars::read_stars(
s2
sub = FALSE
s2 <- stars::read_stars(
s2,
sub = FALSE
# driver = ".nc",
# along = 3,
# curvilinear = c("longitude", "latitude"),
# proxy = F
)
# Import des données environnementales
s2 <- list.files(
here("data", "raw", "env", "copernicus", my_var), full.names = T
)[1]
s2 <- stars::read_stars(
s2
# driver = ".nc",
# along = 3,
# curvilinear = c("longitude", "latitude"),
# proxy = F
)
s2
s2 <- stars::read_stars(
s2,
driver = ".nc"
# along = 3,
# curvilinear = c("longitude", "latitude"),
# proxy = F
)
# Import des données environnementales
s2 <- list.files(
here("data", "raw", "env", "copernicus", my_var), full.names = T
)[1:2]
s2 <- stars::read_stars(
s2,
along = 3
# curvilinear = c("longitude", "latitude"),
# proxy = F
)
s2
s2 <- stars::read_stars(
s2,
along = 3,
curvilinear = c("longitude", "latitude")
# proxy = F
)
s2 <- stars::read_stars(
s2,
along = 3,
proxy = F
)
s2 <- stars::read_stars(
s2,
along = 3
)
# Import des données environnementales
s2 <- list.files(
here("data", "raw", "env", "copernicus", my_var), full.names = T
)[1:2]
s2 <- stars::read_stars(
s2,
along = 3
)
?read_stars
# Import des données environnementales
s2_list <- list.files(
here("data", "raw", "env", "copernicus", my_var), full.names = T
)[1:2]
s2_list
s2 <- stars::read_stars(
s2_list,
along = 3,
normalize_path = FALSE
)
s2
read_stars
setwd(here("data", "raw", "env", "copernicus", my_var))
list.files()
s2 <- stars::read_stars(
list.files(),
along = 3
)
s2
list.files()[1:2]
s2 <- stars::read_stars(
list.files()[1:2]
)
s2
?read_stars
open(s2_list[[1]])
s2_list[[1]]
read_ncdf
# Import des données environnementales
s2_list <- list.files(
here("data", "raw", "env", "copernicus", my_var), full.names = T
)[1:2]
s2 <- s2_list %>%
lapply(read_ncdf, proxy = F)
s2 <- s2_list %>%
lapply(read_ncdf)
s2
stars::st_dimensions(s2)
s2
s3 <- read_stars(s2_list)
s3
s2
s2 <- s2_list %>%
lapply(read_ncdf)
s2 <- do.call(c, s2)
s2
s2
s3
s2 <- s2_list %>%
lapply(read_ncdf, make_time = T, make_units = T, var = "bottomT")
s2 <- s2_list %>%
lapply(
read_ncdf, make_time = T, make_units = T, var = "bottomT", curvilinear = c("longitude", "latitude")
)
s2 <- s2_list %>%
lapply(
read_ncdf,
make_time = T,
make_units = T,
var = "bottomT",
# curvilinear = c("longitude", "latitude")
NULL
)
s2
s2 <- do.call(c, s2)
s2
s3
class(s2)
class(s3)
s2 <- do.call(c, s2) %>%
st_as_stars()
s2
s2
s2
s3
s2
s3
s2
s2
s3
s4 <- read_mdim(s2_list)
s4
s4
s5 <- st_as_stars(s4)
s5
s3
s5
s3
s2
s2 <- s2_list %>%
lapply(
read_ncdf,
make_units = T,
var = "bottomT",
# curvilinear = c("longitude", "latitude")
NULL
)
s2 <- do.call(c, s2) %>%
stars::
s2 <- do.call(c, s2)
s2
s2
s3
st_bbox(s2)
st_set_bbox(s3, st_bbox(s2))
s6 <- st_set_bbox(s3, st_bbox(s2))
class(s6)
identical(s3, s6)
s3
s6
s6 <- st_set_bbox(s3, st_bbox(s3))
identical(s3, s6)
st_bbox(s2)
s2 <- s2_list %>%
lapply(read_ncdf, var = my_var)
s2 <- do.call(c, s2)
st_bbox(s3)
bbox <-
s3 <- read_stars(s2_list)
st_bbox(s3)
identical(s3, s6)
st_bbox(s3)
bbox <-  c(
xmin = -140.04167,
ymin = -60.04167,
xmax = 65.04167,
ymax = 60.04167
)
bbox
# Import des données environnementales
s2_list <- list.files(
here("data", "raw", "env", "copernicus", my_var), full.names = T
)[1:2]
s2 <- s2_list %>%
lapply(read_ncdf, var = my_var)
