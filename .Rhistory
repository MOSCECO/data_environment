length(occ)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/data_environment/scripts/boot.R", echo=TRUE)
length(occ)
# aggrégation de toutes les occurrences
O <- do.call(rbind, lapply(occ, do.call, rbind))
# aggrégation de toutes les occurrences
O <- do.call(rbind, lapply(occ, do.call, ... =rbind))
# aggrégation de toutes les occurrences
O <- do.call(rbind, lapply(occ, do.call, `rbind`))
lapply(occ, do.call, rbind)
# aggrégation de toutes les occurrences
O <- do.call(rbind, lapply(occ, \(l) do.call(rbind, l)))
dim(O)
View(O)
ggplot() + geom_sf(data = O)
st_bbox(O)
bb <- c(xmin = -140, ymin = -60, ymax = 60, xmax = 65) %>% st_bbox()
bb
names(O)
O2 <- O %>% cbind(id = 1:nrow(O))
bb <- c(xmin = -140, ymin = -60, ymax = 60, xmax = 65) %>% st_bbox()
O2 <- st_crop(O2, bb)
dim(O)
dim(O2)
O2 <- O %>% cbind(id = 1:nrow(O))
O2 <- sf::st_crop(O2, bb)
dim(O2)
?sf::st_crop
st_bbox(O)
bb <- c(xmin = -125, ymin = -60, ymax = 60, xmax = 65) %>% st_bbox()
bb
st_bbox(O2)
dim(O2)
# aggrégation de toutes les occurrences
O <- do.call(rbind, lapply(occ, \(l) do.call(rbind, l)))
O2 <- O %>% cbind(id = 1:nrow(O))
dim(O2)
bb <- c(xmin = -125, ymin = -60, ymax = 60, xmax = 65) %>% st_bbox()
O3 <- sf::st_crop(O2, bb)
dim(O3)
O2
st_crs(O2)
st_crs(bb)
st_crs(bb) <- st_crs(O2)
bb
O3 <- sf::st_crop(O2, bb)
O3
dim(O3)
View(O3)
ggplot() + geom_sf(data = O) + geom_sf(data = O3, col = "red
")
ggplot() + geom_sf(data = O) + geom_sf(data = O3, col = "red")
st_bbox(O3)
# aggrégation de toutes les occurrences
O <- do.call(rbind, lapply(occ, \(l) do.call(rbind, l)))
bb <- c(xmin = -125, ymin = -60, ymax = 60, xmax = 65) %>% st_bbox()
st_crs(bb) <- st_crs(O2)
O2 <- sf::st_crop(O, bb)
View(O2)
O2$occurrenceID
which(O2$occurrenceID %in% O$occurrenceID)
which(O$occurrenceID %in% O2$occurrenceID)
O <- O[-which(O$occurrenceID %in% O2$occurrenceID), ]
dim(O)
ggplot() + geom_sf(data = O)
# profondeurs
gebc0 <- rast(
here("data", "gebco", "gebco_2023_n60.0_s-60.0_w-140.0_e-20.0.tif")
)
# profondeurs
gebc0 <- rast(
here("data", "raw", "gebco", "gebco_2023_n60.0_s-60.0_w-140.0_e-20.0.tif")
)
# profondeurs
gebc0 <- rast(
here("data", "raw", "gebco", "gebco_2023_n60.0_s-60.0_w-140.0_e-20.0.tif")
)
gebc1 <- rast(
here("data", "raw", "gebco", "gebco_2023_n60.0_s-60.0_w-20.0_e65.0.tif")
)
gebco <- terra::mosaic(gebc0, gebc1)
gebco
# profondeurs
gebc0 <- read_stars(
here("data", "raw", "gebco", "gebco_2023_n60.0_s-60.0_w-140.0_e-20.0.tif")
)
gebc1 <- read_stars(
here("data", "raw", "gebco", "gebco_2023_n60.0_s-60.0_w-20.0_e65.0.tif")
)
gebco2 <- stars::st_mosaic(gebc0, gebc1)
x11(); plot(gebco2)
gebco <- stars::st_mosaic(gebc0, gebc1)
gebco
source("~/Documents/mosceco/r_projects/MOSCECO_L2/data_environment/scripts/boot.R", echo=TRUE)
# Interaction données d'occurrences variables environnementales ----
# environmental variable
database <- "copernicus"
that_var <- "so"
# aggrégation de toutes les occurrences
O <- do.call(rbind, lapply(occ, \(l) do.call(rbind, l)))
bb <- c(xmin = -125, ymin = -60, ymax = 60, xmax = 65) %>% st_bbox()
st_crs(bb) <- st_crs(O)
O2 <- sf::st_crop(O, bb)
O <- O[-which(O$occurrenceID %in% O2$occurrenceID), ]
# profondeurs
gebc0 <- read_stars(
here("data", "raw", "gebco", "gebco_2023_n60.0_s-60.0_w-140.0_e-20.0.tif")
)
gebc1 <- read_stars(
here("data", "raw", "gebco", "gebco_2023_n60.0_s-60.0_w-20.0_e65.0.tif")
)
gebco <- stars::st_mosaic(gebc0, gebc1)
gebco_s2 <- st_as_stars(gebco)
names(gebco_s2) <- "depth"
# suppression des valeurs d'altitude ----
gebco_bathy <- gebco_s2
gebco_bathy[gebco_bathy["depth", , ] > 0] <- 0
O
gebco_bathy[gebco_bathy["depth", , ] > 0] <- 0
saveRDS(
gebco_bathy,
here::here("data", "raw", "gebco", "gebco_bathymetry.rds")
)
# suppression des valeurs d'altitude ----
# gebco_bathy <- gebco_s2
# gebco_bathy[gebco_bathy["depth", , ] > 0] <- 0
# saveRDS(
#   gebco_bathy,
#   here::here("data", "raw", "gebco", "gebco_bathymetry.rds")
# )
gebco_bathy <- readRDS(here("data", "raw", "gebco", "gebco_bathymetry.rds"))
gebco_bathy
# extraction des profondeurs des occurrences ----
O$depth <- st_extract(gebco, O)
View(O)
# extraction des profondeurs des occurrences ----
O$depth <- st_extract(gebco_bathy, O)
View(O)
table(is.na(O$depth))
O <- do.call(rbind, lapply(occ, \(l) do.call(rbind, l)))
bb <- c(xmin = -125, ymin = -60, ymax = 60, xmax = 65) %>% st_bbox()
st_crs(bb) <- st_crs(O)
O2 <- sf::st_crop(O, bb)
O <- O[-which(O$occurrenceID %in% O2$occurrenceID), ]
dim(O)
# extraction des profondeurs des occurrences ----
E <- st_extract(gebco_bathy, O)
dim(E)
dim(O)
View(E)
# extraction des profondeurs des occurrences ----
E2 <- st_extract(gebco, O)
View(E)
View(E2
)
names(E)
names(E)[1]
names(E2)[1]
names(E2)[1] <- "depth"
ggplot() + geom_sf(data = E2, aes(col = depth > 0))
table(E2$depth > 0)
# extraction des profondeurs des occurrences ----
O$depth <- st_extract(gebco_bathy, O) %>%
st_drop_geometry()
View(O)
summary(O$depth)
quantile(O$depth, 0.01)
quantile(O$depth, 0.1)
O$depth
O$depth %>% unlist()
quantile(O$depth %>% as.vector(), 0.1)
O$depth %>% as.vector()
O[["depth"]]
O[["depth"]] %>% unlist(use.names = F)
quantile(O[["depth"]] %>% unlist(use.names = F), 0.1)
quantile(O[["depth"]] %>% unlist(use.names = F), 0.05)
quantile(O[["depth"]] %>% unlist(use.names = F), 0.1)
# et selon les espèces
Os <- split(O, f = O$scientificName)
lapply(Os, \(tb) summary(tb %>% select(depth)))
lapply(Os, \(tb) quantile(tb %>% select(depth), 0.1))
lapply(Os, \(tb) quantile(tb %>% select(depth), 0.1))
res <- lapply(
Os,
\(tb) {
u <- tb %>% select(depth) %>% unlist(use.names = F)
quantile(u, 0.1)
}
)
res
summary(res)
summary(unlist(res))
quantile(unlist(res), 0.1)
summary(unlist(res))
sort(res)
sort(unlist(res, use.names = F))
which(unlist(res, use.names = F) < -500)
Op <- Os[which(unlist(res, use.names = F) < -500), ]
Op <- Os[which(unlist(res, use.names = F) < -500)]
Op %>% lapply(dim)
Op %>% lapply(\(tb) {
u <- tb %>% select(depth) %>% unlist(use.names = F)
summary(u)
}) %>%
unlist()
Op %>% lapply(\(tb) {
u <- tb %>% select(depth) %>% unlist(use.names = F)
summary(u)
})
Op$`Coralliophila aedonia`
Op$`Coralliophila aedonia` %>% View()
Op %>% lapply(\(tb) {
u <- tb %>% select(depth) %>% unlist(use.names = F)
summary(u)
})
tb <- Op$`Coralliophila aedonia`
u <- tb %>% select(depth) %>% unlist(use.names = F)
u
dim(tb)
tb$depth
tb$depth %>% unlist()
tb %>% select(depth) %>% unlist(use.names = F)
View(tb)
# et selon les espèces
Os <- split(O, f = O$scientificName)
res <- lapply(
Os,
\(tb) {
u <- tb %>%
st_drop_geometry() %>%
select(depth) %>%
unlist(use.names = F)
quantile(u, 0.1)
}
)
res
sort(res)
sort(unlist(res))
Op <- Os[which(unlist(res, use.names = F) < -500)]
Op %>% lapply(dim)
Op %>% lapply(\(tb) {
u <- tb %>%
st_drop_geometry() %>%
select(depth) %>%
unlist(use.names = F)
summary(u)
})
Op %>% lapply(\(tb) {
u <- tb %>%
st_drop_geometry() %>%
select(depth) %>%
unlist(use.names = F)
summary(u)
})
source("~/Documents/mosceco/r_projects/MOSCECO_L2/data_environment/scripts/boot.R", echo=TRUE)
BT
# Interaction données d'occurrences variables environnementales ----
# environmental variable
database <- "copernicus"
that_var <- "so"
# aggrégation de toutes les occurrences
O <- do.call(rbind, lapply(occ, \(l) do.call(rbind, l)))
bb <- c(xmin = -125, ymin = -60, ymax = 60, xmax = 65) %>% st_bbox()
st_crs(bb) <- st_crs(O)
O2 <- sf::st_crop(O, bb)
O <- O[-which(O$occurrenceID %in% O2$occurrenceID), ]
# profondeurs
gebc0 <- read_stars(
here("data", "raw", "gebco", "gebco_2023_n60.0_s-60.0_w-140.0_e-20.0.tif")
)
gebc1 <- read_stars(
here("data", "raw", "gebco", "gebco_2023_n60.0_s-60.0_w-20.0_e65.0.tif")
)
gebco <- stars::st_mosaic(gebc0, gebc1)
gebco_s2 <- st_as_stars(gebco)
names(gebco_s2) <- "depth"
# suppression des valeurs d'altitude ----
# gebco_bathy <- gebco_s2
# gebco_bathy[gebco_bathy["depth", , ] > 0] <- 0
# saveRDS(
#   gebco_bathy,
#   here::here("data", "raw", "gebco", "gebco_bathymetry.rds")
# )
gebco_bathy <- readRDS(here("data", "raw", "gebco", "gebco_bathymetry.rds"))
# extraction des profondeurs des occurrences ----
O$depth <- st_extract(gebco_bathy, O) %>%
st_drop_geometry()
# Études des profondeurs pour toutes les occurrences
quantile(O[["depth"]] %>% unlist(use.names = F), 0.1)
# et selon les espèces
Os <- split(O, f = O$scientificName)
bathy_threshold <- lapply(
Os,
\(tb) {
u <- tb %>%
st_drop_geometry() %>%
select(depth) %>%
unlist(use.names = F)
quantile(-u, 0.75)  # Seuil arbitraire pour être assez stringent pour ne pas
# aller échantillonner des pseudo-absences complètement en dehors de la
# niche de l'espèce
}
)
# Bathymetric threshold
BT <- ceiling(summary(sort(unlist(bathy_threshold)))[5]/10)*10
bathy_threshold_rounded <- lapply(bathy_threshold, \(x) ceiling(x/10)*10)
# Espèces "profondes" (à mettre en lien avec les listes d'espèces "côtières"
# et "profondes" de data_biologic)
Op <- Os[which(unlist(bathy_threshold, use.names = F) > 500)]
Op %>% lapply(dim)
Op %>% lapply(\(tb) {
u <- tb %>%
st_drop_geometry() %>%
select(depth) %>%
unlist(use.names = F)
summary(u)
})
# Toutes les moyennes des profondeurs pour les espèces qui ont les quantiles 10%
# les plus profonds sont aux alentours de quelques centaines de m
# Coralliophila aedonia est particulièrement
# Écriture d'un seul raster de profondeurs pour les climatologies
# à partir du troisième quartile des profondeurs à 75% de toutes les espèces
file_name <- paste(
"bathymetry", "gebco", "raster", BT %>% paste0("m"), sep = "_"
) %>%
paste0(".tif")
bool <- !file.exists(here(pb, file_name))
# Écriture d'un seul raster de profondeurs pour les climatologies
# à partir du troisième quartile des profondeurs à 75% de toutes les espèces
# Dossier de sortie
pb <- here("data", "tidy", "bathymetrie_gebco_raster")
makeMyDir(pb)
file_name <- paste(
"bathymetry", "gebco", "raster", BT %>% paste0("m"), sep = "_"
) %>%
paste0(".tif")
bool <- !file.exists(here(pb, file_name))
if (bool) {
# Nettoyage de la mémoire vive
gc()
# sélection de l'intervalle bathymétrique
gebco_s2[
gebco_s2["depth", , ] < -BT | gebco_s2["depth", , ] > 0
] <- NA
# Sauvegarde
write_stars(gebco_s2, here(pb, file_name))
}
gc()
# filtre selon les profondeurs pour les climatologies de salinité
seuils <- list(
c(0, -9.573),
c(-9.573, -25.2114),
c(-25.2114, -77.8539),
c(-77.8539, -130.666),
c(-130.666, -bathy_threshold)
)
# filtre selon les profondeurs pour les climatologies de salinité
seuils <- list(
c(0, -9.573),
c(-9.573, -25.2114),
c(-25.2114, -77.8539),
c(-77.8539, -130.666),
c(-130.666, -BT)
)
names(seuils) <- paste0("lvl", 0:4)
# Nouvelle importation
gebco_rast <- here(
"data", "tidy", "bathymetrie_gebco_raster",
"bathymetry_gebco_raster_200m.tif"
) %>% rast()
gebco_rast
# filtre selon les profondeurs pour les climatologies de salinité
seuils <- list(
c(0, -9.573),
c(-9.573, -25.2114),
c(-25.2114, -77.8539),
c(-77.8539, -130.666),
c(-130.666, -BT)
)
names(seuils) <- paste0("lvl", 0:4)
bathy_slices <- lapply(
seuils,
\(bnd) {
# bnd <- seuils$lvl0
rout <- ifel(
gebco_rast <= bnd[[1]] & gebco_rast > bnd[[2]], 1, NA
)
return(rout)
}
)
names(bathy_slices) <- paste0("lvl", 0:4)
saveRDS(
bathy_slices,
here(
"data",
"tidy",
"bathymetrie_gebco_raster",
paste(
"bathymetry", "gebco", "raster", "slices",
bathy_threshold %>% paste0("m"),
# tolower(superfamily), tolower(species),
sep = "_") %>%
paste0(".rds")
)
)
paste(
"bathymetry", "gebco", "raster", "slices",
bathy_threshold %>% paste0("m"),
# tolower(superfamily), tolower(species),
sep = "_") %>%
paste0(".rds")
)
# sauvegarde
saveRDS(
bathy_slices,
here(
"data",
"tidy",
"bathymetrie_gebco_raster",
paste(
"bathymetry", "gebco", "raster", "slices",
BT %>% paste0("m"),
# tolower(superfamily), tolower(species),
sep = "_") %>%
paste0(".rds")
)
)
lapply(
names(bathy_slices),
\(nr) {
writeRaster(
bathy_slices[[nr]],
here(
"data",
"tidy",
"bathymetrie_gebco_raster",
paste(
"bathymetry", "gebco", "raster",
paste(seuils[[nr]], collapse = "_") %>% paste0("m"),
# tolower(superfamily), tolower(species),
sep = "_") %>%
paste0(".tif")
)
)
}
)
